# Generated by Django 2.2.5 on 2020-01-24 16:08

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import gallery.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='HubUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SharedNotebook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notebook_name', models.TextField(default='')),
                ('notebook_content', models.TextField(default='')),
                ('description', models.TextField(default='')),
                ('tags', models.TextField(default='')),
                ('data_sources', models.TextField(default='')),
                ('views', models.IntegerField(default=0)),
                ('updated_at', models.DateTimeField(default='2020-01-17 16:08:47+00:00')),
                ('created_at', models.DateTimeField(default='2020-01-17 16:08:47+00:00')),
                ('published', models.BooleanField(default=False)),
                ('hub_member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('master_notebook', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='gallery.SharedNotebook')),
            ],
        ),
        migrations.CreateModel(
            name='NotebookLike',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default='2020-01-24 16:08:47+00:00')),
                ('hub_member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('notebook', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gallery.SharedNotebook')),
            ],
        ),
        migrations.CreateModel(
            name='NotebookComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment_text', models.TextField(default='')),
                ('created_at', models.DateTimeField(default='2020-01-24 16:08:47+00:00')),
                ('hub_member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('notebook', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gallery.SharedNotebook')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='HubSpace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('space_name', models.TextField(default='')),
                ('space_description', models.TextField(default='')),
                ('type', models.IntegerField(choices=[(0, 'Private'), (1, 'AllCanRead'), (2, 'AllCanWrite')], default=gallery.models.SpaceTypes(0))),
                ('spaces_admin', models.ManyToManyField(blank=True, related_name='spaces_admin', to=settings.AUTH_USER_MODEL)),
                ('spaces_read', models.ManyToManyField(blank=True, related_name='spaces_read', to=settings.AUTH_USER_MODEL)),
                ('spaces_write', models.ManyToManyField(blank=True, related_name='spaces_write', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
